class Solution {
    public int minDistance(String word1, String word2) {
        int[][]dp=new int[word1.length()][word2.length()];
        for(int i=0;i<word1.length();i++){
            for(int j=0;j<word2.length();j++){
                dp[i][j]=-1;
            }
        }
        return findMinOperations(word1,word2,0,0,dp);
    }

    private int findMinOperations(String word1,String word2,int index1,int index2,int[][]dp){
        if(index1==word1.length()){
            return word2.length()-index2;
        }
        if(index2==word2.length()){
            return word1.length()-index1;
        }
        if(dp[index1][index2]!=-1) return dp[index1][index2];
        if(word1.charAt(index1)==word2.charAt(index2)){
            dp[index1][index2]= findMinOperations(word1,word2,index1+1,index2+1,dp);
        }
        else{
            int delete=1+findMinOperations(word1,word2,index1,index2+1,dp);
        int insert=1+findMinOperations(word1,word2,index1+1,index2,dp);
        int replace=1+findMinOperations(word1,word2,index1+1,index2+1,dp);

                    dp[index1][index2]=Math.min(delete,Math.min(insert,replace));

        }
        

            

            return dp[index1][index2];
        }

        

        
    }
