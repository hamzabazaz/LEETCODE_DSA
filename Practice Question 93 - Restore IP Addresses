class Solution {
    public List<String> restoreIpAddresses(String s) {
        if (s.length() < 4 || s.length() > 12) return new ArrayList<>();
        List<String> res = new ArrayList<>();
        helper(s, res, 0, 0, "");
        return res;
    }

    private void helper(String s, List<String> res, int idx, int part, String tans) {
        if (part == 4) {
            if (idx == s.length()) {
                res.add(tans.substring(0, tans.length() - 1));
            }
            return;
        }

        // try 1-digit
        if (idx + 1 <= s.length()) {
            helper(s, res, idx + 1, part + 1, tans + s.substring(idx, idx + 1) + ".");
        }

        // try 2-digit
        if (idx + 2 <= s.length() && isValid(s.substring(idx, idx + 2))) {
            helper(s, res, idx + 2, part + 1, tans + s.substring(idx, idx + 2) + ".");
        }

        // try 3-digit
        if (idx + 3 <= s.length() && isValid(s.substring(idx, idx + 3))) {
            helper(s, res, idx + 3, part + 1, tans + s.substring(idx, idx + 3) + ".");
        }
    }

    private boolean isValid(String s) {
        if (s.length() > 1 && s.charAt(0) == '0') return false;
        int val = Integer.parseInt(s);
        return val <= 255;
    }
}
