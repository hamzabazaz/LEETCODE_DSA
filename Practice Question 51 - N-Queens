class Solution {
    List<List<String>> result=new ArrayList();
    public List<List<String>> solveNQueens(int n) {

        char[][] board=new char[n][n];

        for(int i=0;i<board.length;i++){
            for(int j=0;j<board.length;j++){
                board[i][j]='.';
            }
        }
        List<int[]> queens=new ArrayList<>();
        nQueens(board,0,queens);
        return result;
        
    }

    private void nQueens(char[][]board,int r,List<int[]> queens){
        if(queens.size()==board.length){
            List<String> rows=new ArrayList();
            for(char[] row:board){
                rows.add(new String(row));
            }
            result.add(rows);
        }

        for(int c=0;c<board.length;c++){
            if(canPlace(r,c,queens)){
                board[r][c]='Q';
                queens.add(new int[]{r,c});
                nQueens(board,r+1,queens);
                board[r][c]='.';
                queens.remove(queens.size()-1);
            }
        }
    }

        private boolean canPlace(int row,int col,List<int[]>queens){

            for(int[] q:queens){
                int dx=Math.abs(row-q[0]);
                int dy=Math.abs(col-q[1]);

                if(dx==0||dy==0||dx==dy){
                    return false;
                }

            }
            return true;     
        }
}



