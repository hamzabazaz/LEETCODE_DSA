class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result=new ArrayList<>();
        Arrays.sort(nums);
        backtrack(result,new ArrayList<>(),nums,new boolean[nums.length]);
        return result;
    }


    private void backtrack(List<List<Integer>> result, List<Integer>combo,int[] nums,boolean[] isUsed){
        if(combo.size()==nums.length){
            result.add(new ArrayList(combo));
            return;
        }

        for(int i=0;i<nums.length;i++){
            if(isUsed[i]==true) continue;

            if(i>0 && nums[i]==nums[i-1] && !isUsed[i-1]) continue;

            isUsed[i]=true;
            combo.add(nums[i]);
            backtrack(result,combo,nums,isUsed);
            isUsed[i]=false;
            combo.remove(combo.size()-1);
            
        }
      
        
    }
}


        
